3.2 Model for asm files

___________
TIPS (REMEMBER)

- Do normalize the features as the data is in very large amount

-----------

* .asm files :
  -----------

* Feature Extraction & Multi Processing :
  ------
	[1st step notion]
	-> Picked out the 50 keywords from the content of asm files that best identify the .asm files

	[Challange] :- doing what count vectorizer does but on 150+ GB of Data
		=> to tackle with 150+ GB of Data we will leverage the Multi-Threading via Python

	* Bag Of Words :
		=> Bag Of Words & Multi-Threading for asm files


	=> We will employ Multi-Threading for Fnding the Coun-Vectorizer stuff usinng custom implementation
	   just because if very huge amount of data

---

- Features we draw out for asm files :- 
     1) ID
     2) size
     3) Class

     4) size is the size in bytes of asm files


* File size Features
  _________________
  - BoxPlot to help out
  -> To check if filesize is useful or not we just use `boxplot`


=> All the most features are Count Vectorizer

* Univariate Analysis :
  -----------
   -> Do univariate analysis for diff features (ie among 52 founded earlier)

      not necessary to do on all 52 features but some of them to check if any info can be drawn out
      to distinnguish between 2 classes

      & try to spot out if any feature can help to distinguish single or group of classes
        (may be not all but few )

=> All in all we have 53 features (ie 52 asm picked out + 1 file size)

* MultiVariate Analysis : (using TSNE)
  -----------
   -> perplexity = 50


-------------------------
(Considering all features (bytes + asm))

- thus we have check 2 models seperately with diff data 
    
    1) Bytes file Model :- (256 + 1) features

    2) asm file Model :- (52 + 1) features

-> Till far we've found that RF & XGBoost were good in both the case ie bytes files & asm files models

* Combine Model Immpact :
  -------------

    (253 + 53) features

    asm + bytes :- XGBoost 

      asm := 52 + size
      bytes := size + BOW (hexadecimal)

    This is just First Cut Reasonably Solution

